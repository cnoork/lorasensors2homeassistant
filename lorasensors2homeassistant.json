[
    {
        "id": "0d7e1987dc3db337",
        "type": "group",
        "z": "7a9ca1740ef5409d",
        "name": "Lora integration for Home Assistant",
        "style": {
            "label": true
        },
        "nodes": [
            "e24f8512d4db2f2d",
            "a9ba32af7e7883d1",
            "8de41961ae0793dc",
            "6d333ae8049ecb31",
            "06e009f787e4082c",
            "18851b45cf4d78ed",
            "3d8a3f551c25395b",
            "5635797e828b90ca",
            "2cc64f8f8c162755",
            "dbca8e2b359fbfe3",
            "991ee8109cb16089",
            "6979bfcffb1e3c8a",
            "ca1484e91e507649",
            "23fa4b1a43e5d9bd",
            "1a825a703ca5eb62",
            "3a75576461e800dd",
            "de1015ac5996ed4d",
            "46f5ad383e1d60b2",
            "883a94c5edda900c",
            "730208640ecd18ec",
            "a77fbfcba7262e94",
            "907ecc280e46f08f",
            "a970ae1573407ca4"
        ],
        "x": 68,
        "y": 39,
        "w": 1144,
        "h": 988
    },
    {
        "id": "e24f8512d4db2f2d",
        "type": "mqtt in",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "0d7e1987dc3db337",
        "name": "TTN - app-02 | v3/+/devices/+/up/#",
        "topic": "v3/+/devices/+/up/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34b3812930585fe6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 280,
        "wires": [
            [
                "991ee8109cb16089",
                "23fa4b1a43e5d9bd"
            ]
        ]
    },
    {
        "id": "a9ba32af7e7883d1",
        "type": "inject",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "a77fbfcba7262e94"
            ]
        ]
    },
    {
        "id": "8de41961ae0793dc",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 140,
        "wires": []
    },
    {
        "id": "6d333ae8049ecb31",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 220,
        "wires": []
    },
    {
        "id": "06e009f787e4082c",
        "type": "mqtt out",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "0d7e1987dc3db337",
        "name": "HomeAssistant",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d02c3570ba850c4f",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "18851b45cf4d78ed",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "3d8a3f551c25395b",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 360,
        "wires": []
    },
    {
        "id": "5635797e828b90ca",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "2cc64f8f8c162755",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 440,
        "wires": []
    },
    {
        "id": "dbca8e2b359fbfe3",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 580,
        "wires": []
    },
    {
        "id": "991ee8109cb16089",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "6979bfcffb1e3c8a",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 620,
        "wires": []
    },
    {
        "id": "ca1484e91e507649",
        "type": "delay",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 540,
        "wires": [
            [
                "46f5ad383e1d60b2"
            ]
        ]
    },
    {
        "id": "23fa4b1a43e5d9bd",
        "type": "junction",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "907ecc280e46f08f"
            ]
        ]
    },
    {
        "id": "1a825a703ca5eb62",
        "type": "mqtt in",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "0d7e1987dc3db337",
        "name": "TTN - app-01 | v3/+/devices/+/up/#",
        "topic": "v3/+/devices/+/up/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "364cba795bd47ac5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 220,
        "wires": [
            [
                "6d333ae8049ecb31",
                "23fa4b1a43e5d9bd"
            ]
        ]
    },
    {
        "id": "3a75576461e800dd",
        "type": "group",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "Command (downlink) to lora device",
        "style": {
            "label": true
        },
        "nodes": [
            "ae66195b90369ddf",
            "e778e00d2016198d",
            "d6801530ab0fca25",
            "ec5e28051956abbb",
            "9b3b7c92569c0692",
            "5fa7a3503a23b211",
            "55cab2d2097eedc7",
            "65c3a16a4a8c8bce",
            "71fbfe267ab37585",
            "98e1b8aea962191d",
            "40a312dd5fd6038e",
            "bb6a80d1fe07c64a"
        ],
        "x": 94,
        "y": 659,
        "w": 1092,
        "h": 342
    },
    {
        "id": "ae66195b90369ddf",
        "type": "mqtt in",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "3a75576461e800dd",
        "name": "HomeAssistant",
        "topic": "mqtt2nodered2lora/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d02c3570ba850c4f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 740,
        "wires": [
            [
                "40a312dd5fd6038e"
            ]
        ]
    },
    {
        "id": "e778e00d2016198d",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 700,
        "wires": []
    },
    {
        "id": "d6801530ab0fca25",
        "type": "mqtt out",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "3a75576461e800dd",
        "name": "TTN - app-02",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "34b3812930585fe6",
        "x": 1090,
        "y": 960,
        "wires": []
    },
    {
        "id": "ec5e28051956abbb",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 740,
        "wires": []
    },
    {
        "id": "9b3b7c92569c0692",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 780,
        "wires": []
    },
    {
        "id": "5fa7a3503a23b211",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "TTN - app-02",
        "func": "if (msg.result.application == \"app-02\") {\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 920,
        "wires": [
            [
                "d6801530ab0fca25",
                "71fbfe267ab37585"
            ]
        ]
    },
    {
        "id": "55cab2d2097eedc7",
        "type": "junction",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "x": 380,
        "y": 820,
        "wires": [
            [
                "5fa7a3503a23b211",
                "bb6a80d1fe07c64a"
            ]
        ]
    },
    {
        "id": "65c3a16a4a8c8bce",
        "type": "mqtt out",
        "z": "7a9ca1740ef5409d",
        "d": true,
        "g": "3a75576461e800dd",
        "name": "TTN - app-01",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364cba795bd47ac5",
        "x": 1090,
        "y": 860,
        "wires": []
    },
    {
        "id": "71fbfe267ab37585",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 920,
        "wires": []
    },
    {
        "id": "98e1b8aea962191d",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "40a312dd5fd6038e",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "Downlink for lora and update HA",
        "func": "msg.settings = flow.get(\"settings\")\nif(!msg.result) {\n    msg.result = {}\n}\n\nmsg.result.manufacturer = msg.topic.split(\"/\")[1]\nmsg.result.application = msg.topic.split(\"/\")[2]\nmsg.result.deviceName = msg.topic.split(\"/\")[3]\nmsg.result.join_eui = msg.topic.split(\"/\")[4]\nmsg.result.sensor = msg.topic.split(\"/\")[6]\nmsg.result.value = msg.payload\nmsg.result.fPort = msg.settings.joinKey2device[msg.result.join_eui].downlink.fPort\nmsg.result.commandKey = msg.settings.joinKey2device[msg.result.join_eui].downlink.switch.cmd\n\nmsg.result.command = msg.result.value\nif (msg.settings.joinKey2device[msg.result.join_eui].downlink.switch[msg.result.value]) {\n    msg.result.command = msg.settings.joinKey2device[msg.result.join_eui].downlink.switch[msg.result.value]\n}\n\nmsg.result.downlink = {\n    result: msg.result,\n    topic: \"v3/\" + msg.result.application + \"@ttn/devices/\" + msg.result.deviceName + \"/down/push\",\n    payload: {\n        downlinks: [\n            {\n                f_port: msg.result.fPort,\n                decoded_payload: { [msg.result.commandKey]: msg.result.command},\n                priority: \"NORMAL\",\n                confirmed: false\n            }\n        ]\n    }\n}\n    \nmsg.result.ha = {\n    result: msg.result,\n    topic: \"lora2nodered2mqtt/\" + msg.result.manufacturer + \"/\" + msg.result.deviceName + \"/get/\" + msg.result.sensor,\n    payload: msg.result.value\n}\n\nvar msgMqttHa = msg.result.ha\n\nvar msgMqttLora = msg.result.downlink\n\nreturn [msg, msgMqttHa, msgMqttLora]",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "e778e00d2016198d"
            ],
            [
                "ec5e28051956abbb",
                "de1015ac5996ed4d"
            ],
            [
                "9b3b7c92569c0692",
                "55cab2d2097eedc7"
            ]
        ],
        "outputLabels": [
            "debug",
            "output mqtt HA device values",
            "output mqtt downlink Lora server"
        ]
    },
    {
        "id": "bb6a80d1fe07c64a",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "3a75576461e800dd",
        "name": "TTN - app-01",
        "func": "if (msg.result.application == \"app-01\") {\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 820,
        "wires": [
            [
                "65c3a16a4a8c8bce",
                "98e1b8aea962191d"
            ]
        ]
    },
    {
        "id": "de1015ac5996ed4d",
        "type": "delay",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "46f5ad383e1d60b2"
            ]
        ]
    },
    {
        "id": "46f5ad383e1d60b2",
        "type": "junction",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "x": 980,
        "y": 480,
        "wires": [
            [
                "06e009f787e4082c",
                "883a94c5edda900c"
            ]
        ]
    },
    {
        "id": "883a94c5edda900c",
        "type": "debug",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 480,
        "wires": []
    },
    {
        "id": "730208640ecd18ec",
        "type": "comment",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "url's for mqtt integration",
        "info": "https://www.home-assistant.io/integrations/mqtt/\n\n\n==== The options are implemented ====\n\nhttps://www.home-assistant.io/integrations/sensor/\nhttps://www.home-assistant.io/integrations/sensor.mqtt/\n\nhttps://www.home-assistant.io/integrations/switch/\nhttps://www.home-assistant.io/integrations/switch.mqtt/\n\n\n\n==== Following are not yet implemented and probably there are more options ====\n\nhttps://www.home-assistant.io/integrations/climate/\nhttps://www.home-assistant.io/integrations/climate.mqtt/\n\nhttps://www.home-assistant.io/integrations/valve/\nhttps://www.home-assistant.io/integrations/valve.mqtt/\n",
        "x": 560,
        "y": 80,
        "wires": []
    },
    {
        "id": "a77fbfcba7262e94",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "Settings to flow variable (flow.set)",
        "func": "// general settings\n// topic names which could be different per Lora server\nmsg.settings = {\n    joinKey2device: {\n        \"70b3d52dd3000000\": { manufacturer: \"MClimate\", model: \"Vicki\" },\n        \"70b3d52dd8000000\": { manufacturer: \"MClimate\", model: \"WirelessThermostat\" },\n        \"24e124c0002a0001\": { manufacturer: \"Milesight\", model: \"WS523 - Smart Portable Socket\", downlink: { fPort: 1, switch: { cmd: \"setState\", on: \"open\", off: \"close\" } } },\n        \"70b3d5fffe0b5002\": { manufacturer: \"OfficeSense\", model: \"Comfort\" },\n        \"70b3d5fffe0b5502\": { manufacturer: \"OfficeSense\", model: \"Comfort\" },\n        \"70b3d5fffe0b5005\": { manufacturer: \"OfficeSense\", model: \"Desk\" },\n        \"70b3d5fffe0b5505\": { manufacturer: \"OfficeSense\", model: \"Desk\" },\n        \"70b3d5fffe0b5001\": { manufacturer: \"OfficeSense\", model: \"Presence\" },\n        \"70b3d5fffe0b5501\": { manufacturer: \"OfficeSense\", model: \"Presence\" },\n    },\n\n    deviceInfo: {\n        hw_version: [ \"hwVersion\", \"hardwareVersion\" ],\n        sw_version: [ \"swVersion\", \"softwareVersion\"] \n    },\n\n    sensorKeyTranslate: {\n        rssi: \"signal_strength\",\n        tempC: \"temperature\",\n        co2: \"carbon_dioxide\",\n        factor: \"power_factor\",\n        state: \"switch\",\n        vddPct: \"battery\",\n        power_sum: \"energy_total\",\n    },\n\n    sensor2device_class: {\n        energy_total: { device_class: \"energy\" },\n        occupied: { device_class: \"None\" },\n    },\n\n    deviceInfoo: {\n        hw_version: [ \"hwVersion\", \"hardwareVersion\" ],\n        sw_version: [ \"swVersion\", \"softwareVersion\" ]\n    },\n\n    sensor_device_class: {\n        None: {\n            description: \"Generic sensor.\",\n        },\n        apparent_power: {\n        \tdescription: \"Apparent power in VA.\",\n        },\n        aqi: {\n            description: \"Air Quality Index (unitless).\",\n        },\n        area: {\n            description: \"Area in m², cm², km², mm², in², ft², yd², mi², ac, ha\",\n        },\n        atmospheric_pressure: {\n            description: \"Atmospheric pressure in cbar, bar, hPa, mmHg, inHg, kPa, mbar, Pa or psi\",\n        },\n        battery: {\n            description: \"Percentage of battery that is left in %\",\n        },\n        blood_glucose_concentration: {\n            description: \"Blood glucose concentration in mg/dL, mmol/L\",\n        },\n        carbon_dioxide: {\n            description: \"Carbon Dioxide in CO2 (Smoke) in ppm\",\n            unit_of_measurement: \"ppm\",\n        },\n        carbon_monoxide: {\n            description: \"Carbon Monoxide in CO (Gas CNG/LPG) in ppm\",\n        },\n        current: {\n            description: \"Current in A, mA\",\n            unit_of_measurement: \"mA\",\n        },\n        data_rate: {\n            description: \"Data rate in bit/s, kbit/s, Mbit/s, Gbit/s, B/s, kB/s, MB/s, GB/s, KiB/s, MiB/s or GiB/s\",\n        },\n        data_size: {\n            description: \"Data size in bit, kbit, Mbit, Gbit, B, kB, MB, GB, TB, PB, EB, ZB, YB, KiB, MiB, GiB, TiB, PiB, EiB, ZiB or YiB\",\n        },\n        date: {\n            description: \"Date string (ISO 8601)\",\n        },\n        distance: {\n            description: \"Generic distance in km, m, cm, mm, mi, nmi, yd, or in\",\n        },\n        duration: {\n            description: \"Duration in d, h, min, s, or ms\",\n        },\n        energy: {\n            description: \"Energy in J, kJ, MJ, GJ, Wh, kWh, MWh, cal, kcal, Mcal, or Gcal\",\n            unit_of_measurement: \"Wh\",\n        },\n        energy_storage: {\n            description: \"Stored energy in J, kJ, MJ, GJ, Wh, kWh, MWh, cal, kcal, Mcal, or Gcal\",\n        },\n        enum: {\n            description: \"Has a limited set of (non-numeric) states\",\n        },\n        frequency: {\n            description: \"Frequency in Hz, kHz, MHz, or GHz\",\n        },\n        gas: {\n            description: \"Gasvolume in m³, ft³ or CCF\",\n        },\n        humidity: {\n            description: \"Percentage of humidity in the air in %\",\n            unit_of_measurement: \"%\",\n        },\n        illuminance: {\n            description: \"The current light level in lx\",\n        },\n        irradiance: {\n            description: \"Irradiance in W/m² or BTU/(h⋅ft²)\",\n        },\n        moisture: {\n            description: \"ercentage of water in a substance in %\",\n        },\n        monetary: {\n            description: \"The monetary value (ISO 4217)\",\n        },\n        nitrogen_dioxide: {\n            description: \"Concentration of Nitrogen Dioxide in µg/m³\",\n        },\n        nitrogen_monoxide: {\n            description: \"Concentration of Nitrogen Monoxide in µg/m³\",\n        },\n        nitrous_oxide: {\n            description: \"Concentration of Nitrous Oxide in µg/m³\",\n        },\n        ozone: {\n            description: \"Concentration of Ozone in µg/m³\",\n        },\n        ph: {\n            description: \"Potential hydrogen (pH) value of a water solution\",\n        },\n        pm1: {\n            description: \"Concentration of particulate matter less than 1 micrometer in µg/m³\",\n        },\n        pm25: {\n            description: \"Concentration of particulate matter less than 2.5 micrometers in µg/m³\",\n        },\n        pm10: {\n            description: \"Concentration of particulate matter less than 10 micrometers in µg/m³\",\n        },\n        power_factor: {\n            description: \"Power factor (unitless), unit may be None or %\",\n            unit_of_measurement: \"%\",\n        },\n        power: {\n            description: \"Power in W, kW, MW, GW or TW\",\n            unit_of_measurement: \"W\",\n        },\n        precipitation: {\n            description: \"Accumulated precipitation in cm, in or mm\",\n        },\n        precipitation_intensity: {\n            description: \"Precipitation intensity in in/d, in/h, mm/d or mm/h\",\n        },\n        pressure: {\n            description: \"Pressure in Pa, kPa, hPa, bar, cbar, mbar, mmHg, inHg or psi\",\n        },\n        reactive_power: {\n            description: \"Reactive power in var\",\n        },\n        signal_strength: {\n            description: \"Signal strength in dB or dBm\",\n            unit_of_measurement: \"dBm\",\n            icon: \"mdi:signal\",\n        },\n        sound_pressure: {\n            description: \"Sound pressure in dB or dBA\",\n        },\n        speed: {\n            description: \"Generic speed in ft/s, in/d, in/h, in/s, km/h, kn, m/s, mph, mm/d, or mm/s\",\n        },\n        sulphur_dioxide: {\n            description: \"Concentration of sulphur dioxide in µg/m³\",\n        },\n        temperature: {\n            description: \"Temperature in °C, °F or K\",\n            unit_of_measurement: \"°C\",\n        },\n        timestamp: {\n            description: \"Datetime object or timestamp string (ISO 8601)\",\n        },\n        volatile_organic_compounds: {\n            description: \"Concentration of volatile organic compounds in µg/m³\",\n        },\n        volatile_organic_compounds_parts: {\n            description: \"Ratio of volatile organic compounds in ppm or ppb\",\n        },\n        voltage: {\n            description: \"Voltage in V, mV, µV\",\n            unit_of_measurement: \"V\",\n        },\n        volume: {\n            description: \"Generic volume in L, mL, gal, fl. oz., m³, ft³, or CCF\",\n        },\n        volume_flow_rate: {\n            description: \"Volume flow rate in m³/h, ft³/min, L/min, gal/min, or mL/s\",\n        },\n        volume_storage: {\n            description: \"Generic stored volume in L, mL, gal, fl. oz., m³, ft³, or CCF\",\n        },\n        water: {\n            description: \"Water consumption in L, gal, m³, ft³, or CCF\",\n        },\n        weight: {\n            description: \"Generic mass in kg, g, mg, µg, oz, lb, or st\",\n        },\n        wind_speed: {\n            description: \"Wind speed in Beaufort, ft/s, km/h, kn, m/s, or mph\",\n        },\n    }\n}\n\nflow.set( \"settings\", msg.settings )\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "8de41961ae0793dc"
            ]
        ]
    },
    {
        "id": "907ecc280e46f08f",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "Collect all data and rename key's",
        "func": "function dateConvert(jstime) {\n    const date = new Date(jstime);\n    var day = date.getDate() + \"\";\n    var month = (date.getMonth() + 1) + \"\";\n    var year = date.getFullYear() + \"\";\n    var hour = date.getHours() + \"\";\n    var minutes = date.getMinutes() + \"\";\n    var seconds = date.getSeconds() + \"\";\n\n    day = checkZero(day);\n    month = checkZero(month);\n    year = checkZero(year);\n    hour = checkZero(hour);\n    minutes = checkZero(minutes);\n    seconds = checkZero(seconds);\n\n    return year + \"/\" + month + \"/\" + day + \" \" + hour + \":\" + minutes + \":\" + seconds + \" GMT\"\n}\n\nfunction checkZero(data) {\n    if (data.length == 1) {\n        data = \"0\" + data;\n    }\n    return data;\n}\n\nmsg.settings = flow.get(\"settings\")\nif (!msg.result) {\n    msg.result = {}\n}\n\nmsg.result.loraData = {}\n\n// read the new lora message\nif (msg.payload.end_device_ids) {\n    if (msg.payload.end_device_ids.device_id) {\n        msg.result.loraData.deviceName = msg.payload.end_device_ids.device_id\n        msg.result.loraData.join_eui = msg.payload.end_device_ids.join_eui\n        msg.result.loraData.application = msg.payload.end_device_ids.application_ids.application_id\n        msg.result.loraData.timestamp = Date.parse(msg.payload.received_at)\n        msg.result.loraData.timestamp_hr = dateConvert(Date.parse(msg.payload.received_at))\n\n        if (msg.payload.uplink_message) {\n            if (msg.payload.uplink_message.rx_metadata) {\n                if (msg.payload.uplink_message.rx_metadata[0]) {\n                    if (msg.payload.uplink_message.rx_metadata[0].rssi) {\n                        for (const [index, value] of msg.payload.uplink_message.rx_metadata.entries()) { \n                            if (!msg.result.loraData.data) {\n                                msg.result.loraData.data = {}\n                            }\n                            if (!msg.result.loraData.data.rssi) {\n                                msg.result.loraData.data.rssi = value.rssi\n                            } else if (value.rssi > msg.result.loraData.data.rssi) {\n                                msg.result.loraData.data.rssi = value.rssi\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (msg.payload.uplink_message) {\n            if (msg.payload.uplink_message.decoded_payload) {\n                for (const [key, value] of Object.entries(msg.payload.uplink_message.decoded_payload)) {\n                    if (!msg.result.loraData.data) {\n                        msg.result.loraData.data = {}\n                    }\n                    msg.result.loraData.data[key] = value\n                }\n            }\n        }\n    }\n}\n\n// read the prefious message from node red memory\nif (msg.result.loraData.deviceName) {\n    msg.result.previousData = flow.get(\"previous_\" + msg.result.loraData.deviceName) || {metaData: {deviceName: msg.result.loraData.deviceName}, sensorData: {}}\n}\n\n// create latest status\nmsg.result.currentData = {\n    deviceName: msg.result.loraData.deviceName,\n    join_eui: msg.payload.end_device_ids.join_eui,\n    application: msg.payload.end_device_ids.application_ids.application_id,\n    timestamp: msg.result.loraData.timestamp,\n    timestamp_hr: msg.result.loraData.timestamp_hr,\n    metaData: {},\n    sensorData: {}\n}\nfor (const [key, value] of Object.entries(msg.result.previousData.metaData)) {\n    let keyName = key\n    if(msg.settings.sensorKeyTranslate[key]) {\n        keyName = msg.settings.sensorKeyTranslate[key]\n    }\n    msg.result.currentData.metaData[keyName] = value\n}\nfor (const [key, value] of Object.entries(msg.result.previousData.sensorData)) {\n    let keyName = key\n    if(msg.settings.sensorKeyTranslate[key]) {\n        keyName = msg.settings.sensorKeyTranslate[key]\n    }\n    msg.result.currentData.sensorData[keyName] = value\n}\nfor (const [key, value] of Object.entries(msg.result.loraData.data)) {\n    let keyName = key\n    if(msg.settings.sensorKeyTranslate[key]) {\n        keyName = msg.settings.sensorKeyTranslate[key]\n    }\n    msg.result.currentData.sensorData[keyName] = { state: value, received: msg.result.loraData.timestamp }\n}\n\nflow.set(\"previous_\" + msg.result.loraData.deviceName, msg.result.currentData)\n\n\nvar msgOut = {\n    settings: msg.settings,\n    result: msg.result\n}\n\nreturn [msg, msgOut];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "18851b45cf4d78ed"
            ],
            [
                "a970ae1573407ca4",
                "3d8a3f551c25395b"
            ]
        ],
        "outputLabels": [
            "debug",
            "output"
        ]
    },
    {
        "id": "a970ae1573407ca4",
        "type": "function",
        "z": "7a9ca1740ef5409d",
        "g": "0d7e1987dc3db337",
        "name": "Assign device_class and make HA config and value mqtt jobs",
        "func": "function haDevice() {\n    var obj = {\n        identifiers: [\"lora2nodered2mqtt_\" + msg.deviceName],\n        manufacturer: msg.manufacturer + \" (LoRa device)\",\n        model: msg.model,\n        name: msg.deviceName\n    }\n\n    for (const [key, value] of Object.entries(msg.result.currentData.sensorData)) { \n        if(msg.settings.deviceInfo.hw_version.includes(key)) {\n            obj.hw_version = value.state\n            msg.deviceKeys.push(key)\n        }\n        if(msg.settings.deviceInfo.sw_version.includes(key)) {\n            obj.sw_version = value.state\n            msg.deviceKeys.push(key)\n        }\n    }\n    return obj\n}\n\nfunction haSwitch(sensor) {\n    var obj = {}\n    obj.topic = \"homeassistant/switch/\" + msg.deviceName + \"/\" + sensor + \"/config\"\n    obj.payload = {\n        device: msg.device,\n        name: sensor[0].toUpperCase() + sensor.slice(1).replace(\"_\", \" \"),\n        object_id: msg.deviceName + \"_\" + sensor,\n        unique_id: msg.deviceName + \"_\" + sensor + \"_lora2nodered2mqtt\",\n        command_topic: msg.topicDeviceSet + \"/\" + sensor,\n        state_topic: msg.topicDeviceGet + \"/\" + sensor,\n        value_template: \"{{ value }}\",\n        payload_off: \"off\",\n        payload_on: \"on\",\n    }\n    \n    msg.result.haConfigQueue.push(obj)\n    haSwitchValue(sensor)\n}\n\nfunction haSwitchValue(sensor) {\n    var sensorState = msg.result.currentData.sensorData[sensor].state\n    var switchState = \"\"\n    var join_eui = msg.result.currentData.join_eui.toLowerCase()\n    if(sensorState == msg.settings.joinKey2device[join_eui].downlink.switch.on) {\n        switchState = \"on\"\n    } else if(sensorState == msg.settings.joinKey2device[join_eui].downlink.switch.off) {\n        switchState = \"off\"\n    }\n    var obj = {\n        topic: msg.topicDeviceGet + \"/\" + sensor,\n        payload: switchState\n    }\n    msg.result.haValuesQueue.push(obj)\n}\n\nfunction haSensor(sensor, device_class) {\n    var obj = {}\n    obj.topic = \"homeassistant/sensor/\" + msg.deviceName + \"/\" + sensor + \"/config\" \n    obj.payload = {\n        device: msg.device,\n        name: sensor[0].toUpperCase() + sensor.slice(1).replace(\"_\", \" \"),\n        object_id: msg.deviceName + \"_\" + sensor,\n        unique_id: msg.deviceName + \"_\" + sensor + \"_lora2nodered2mqtt\",\n        state_topic: msg.topicDeviceGet + \"/\" + sensor,\n        value_template: \"{{ value }}\",\n    }    \n    if (device_class != \"None\") {\n        obj.payload.device_class = device_class\n    }\n\n    if (msg.settings.sensor_device_class[device_class].unit_of_measurement) {\n        obj.payload.unit_of_measurement = msg.settings.sensor_device_class[device_class].unit_of_measurement\n    }\n    msg.result.haConfigQueue.push(obj)\n    haSensorValue(sensor)\n}\n\nfunction haSensorValue(sensor) {\n    var obj = {\n        topic: msg.topicDeviceGet + \"/\" + sensor,\n        payload: msg.result.currentData.sensorData[sensor].state\n    }\n    msg.result.haValuesQueue.push(obj)\n}\n\nmsg.join_eui = msg.result.currentData.join_eui.toLowerCase()\nif(msg.settings.joinKey2device[msg.join_eui]) {\n    msg.deviceName = msg.result.currentData.deviceName\n    msg.application = msg.result.currentData.application\n    msg.manufacturer = msg.settings.joinKey2device[msg.join_eui].manufacturer\n    msg.model = msg.settings.joinKey2device[msg.join_eui].model\n    msg.manufacturerId = msg.manufacturer.replace(\" \",\"_\")\n    msg.topicDeviceGet = \"lora2nodered2mqtt/\" + msg.manufacturerId + \"/\" + msg.deviceName + \"/get\"\n    msg.topicDeviceSet = \"mqtt2nodered2lora/\" + msg.manufacturerId + \"/\" + msg.application + \"/\" + msg.deviceName + \"/\" + msg.join_eui + \"/set\"\n    \n    msg.result.haConfigQueue = []\n    msg.result.haValuesQueue = []\n    \n    for (const key in msg.result.currentData.sensorData) {\n        var sensor = key\n        var device_class = key\n        if (msg.settings.sensor2device_class[key]) {\n            device_class = msg.settings.sensor2device_class[key].device_class\n        }\n\n        msg.deviceKeys = []\n        msg.device = haDevice()\n\n        if (!msg.deviceKeys.includes(key)) {\n            if (msg.settings.sensor_device_class[device_class]) {\n                haSensor(sensor, device_class)\n            } else if (sensor == \"switch\") {\n                haSwitch(sensor)\n            } else {\n                if (!msg.result.sensors_skip) {\n                    msg.result.sensors_skip = {}\n                }\n                msg.result.sensors_skip[key] = {sensor: sensor, device_class: device_class, value: msg.result.currentData.sensorData[key]}\n            }\n        }\n    }\n\n    for (const value of msg.result.haConfigQueue) { \n        var msgMqtt = value\n        node.send([null, msgMqtt, null, null]);\n    }\n\n    for (const value of msg.result.haValuesQueue) { \n        var msgMqtt = value\n        node.send([null, null, msgMqtt, null]);\n    }\n}\n\nvar msgOut = {\n    settings: msg.settings,\n    result: msg.result,\n}\n\nreturn [msg, null, null, msgOut];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "5635797e828b90ca"
            ],
            [
                "2cc64f8f8c162755",
                "46f5ad383e1d60b2"
            ],
            [
                "dbca8e2b359fbfe3",
                "ca1484e91e507649"
            ],
            [
                "6979bfcffb1e3c8a"
            ]
        ],
        "outputLabels": [
            "debug",
            "output mqtt HA device config",
            "output mqtt HA device values",
            "output"
        ]
    },
    {
        "id": "34b3812930585fe6",
        "type": "mqtt-broker",
        "name": "TTN - app-02",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d02c3570ba850c4f",
        "type": "mqtt-broker",
        "name": "HomeAssistant",
        "broker": "homeassistant.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "364cba795bd47ac5",
        "type": "mqtt-broker",
        "name": "TTN - app-01",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]